
// for (let i=0; i<CUBE_VERTICES.length; i+=5) {
    //   let vt = CUBE_VERTICES;
    //   let U = this.txr[2*side+0];
    //   let V = this.txr[2*side+1];
    //   if (index++ % 4 == 3) {
    //     side = (side + 1) % 6;
    //   }
    //   let u = (vt[i+3] + U) / TXRW;
    //   let v = (vt[i+4] + V) / TXRH;

    //   // Push vertices
    //   cubeVertices.push(
    //     vt[i+0] / 2 * this.l + this.x,
    //     vt[i+1] / 2 * this.w + this.y,
    //     vt[i+2] / 2 * this.h + this.z,
    //     u,
    //     v
    //   );
    // }
    
    // let len = cubeIndices.length / 36 * 24; // length 36, but 24 difference vertices
    // for (let i=0; i<CUBE_INDICES.length; i++) {
    //   let idx = CUBE_INDICES[i];
    //   cubeIndices.push(len+idx);
    // }
    
    // count += 36;




// Draw each buffer
    for (let i=0; i<buffers.length; i++) {
      if (buffers[i].indices.length == 0) continue;

      // Bind the buffers
      buffers[i].setUsing(gl);

      // Setup attributes
      setupVertexAttribs();

      // Back face culling
      buffers[i].setCulling(gl);

      // Draw the elements
      gl.drawElements(gl.TRIANGLES, buffers[i].indices.length, gl.UNSIGNED_INT, 0); // triangles, skip 0, 3 verticies
    }


// function editBlock(x, y, z, type) {
//     if (type == null) {
//         cubes[x+","+y+","+z] = null;
//     } else {
//         let cube = new Cube(x, y, z, 1, 1, 1, type);
//         cubes[x+","+y+","+z] = cube;
//     }

//     cubeVertices = [];
//     cubeIndices = [];

//     // Build non transparent
//     for (let i in cubes) {
//     if (cubes[i] == null) continue;
//     cubes[i].build(true, true);
//     }

//     // Build transparent
//     for (let i in cubes) {
//     if (cubes[i] == null) continue;
//     cubes[i].build(true, false);
//     }

//     let cubeBuffer = buffers[0];
//     cubeBuffer.setUsing(gl);
//     cubeBuffer.setVertices(gl, cubeVertices);
//     cubeBuffer.setIndices(gl, cubeIndices);
// }

// TOP
// 0: + + (0, +) and 0 + +
      // 1: - + (0, +) and 0 + +
      // 2: + + (0, -) and 0 + -
      // 3: - + (0, -) and 0 + -

// LEFT
// 0: - - (0, -) and - 0 -
      // 1: - - (0, +) and - 0 +
      // 2: - + (0, +) and - 0 +
      // 3: - + (0, -) and - 0 -




// pushQueue("smooth_stone", 8, 5, 8-3);

  // Generate chunks
  // let r = data.renderDistance / 2;
  // for (let x=-r; x<=r; x++) {
  //   for (let z=-r; z<=r; z++) {
  //     generateChunk(x, z);
  //   }
  // }

  // cubeVertices = [];
  // cubeIndices = [];
  // cubes = {};
  // count = 0;
  
  // for (let y=0; y<1; y++)
  //   for (let x=-50; x<50; x++)
  //     for (let z=-50; z<50; z++) {
  //       let cube = new Cube(x, y, z, 1, 1, 1, "grass");
  //       cubes[x+","+y+","+z] = cube;
  //     }

  // createCube(0, 0, 0);
  // editBlock(0, 2, -6, "white_concrete");
  // editBlock(1, 2, -6, "white_concrete");
  // editBlock(-1, 2, -6, "white_concrete");
  // editBlock(1, 3, -6, "white_concrete");
  // editBlock(-1, 3, -6, "white_concrete");
  // editBlock(-4, 3, -6, "white_concrete", true);
  // editBlock(3, 4, -6, "white_concrete", true);
  
  // Build non transparent
  // for (let i in cubes) {
  //   cubes[i].build(true, true);
  // }

  // Build transparent
  // for (let i in cubes) {
  //   cubes[i].build(true, false);
  // }

class Cube {
  constructor(x, y, z, l, h, w, type = "smooth_stone") {
    this.type = type;
    this.x = x;
    this.y = y;
    this.z = z;
    this.l = l;
    this.h = h;
    this.w = w;
    this.txr = getTexture(type);
    this.transparent = isTransparent(type);
    this.solid = true;
    this.buffer = null;
  }

  build(remove = true, transparentEx = null) {
    if (transparentEx == this.transparent) return;

    if (this.buffer) {
      this.vertices = buffer.vertices;
      this.indices = buffer.indices;
    } else {
      this.vertices = cubeVertices;
      this.indices = cubeIndices;
    }

    const skipSides = remove ? this.removeFaces() : [];
    const TEXTURE_WIDTH = 384; //256;
    const TEXTURE_HEIGHT = 1520; //944;
    const TXRW = TEXTURE_WIDTH / 16;
    const TXRH = TEXTURE_HEIGHT / 16;
    const TOTAL_SIDES = this.indices.length / 6;
    const TOTAL_VERTS = TOTAL_SIDES * 4;
    let totalVerts = 0;

    // Iterate over all 6 sides
    for (let side = 0; side < 6; side++) {
      if (skipSides[side]) continue;

      // Iterate over vertices
      for (let j = 0; j < 4; j++) {
        let vstart = 4 * 5 * side + j * 5; // skip 5 attributes

        // Calculate texture coordinates
        let vt = CUBE_VERTICES;
        let U = this.txr[2 * side + 0];
        let V = this.txr[2 * side + 1];
        let u = (vt[vstart + 3] + U) / TXRW;
        let v = (vt[vstart + 4] + V) / TXRH;

        // Calculate shade
        let shade = 0.5 - (side / 6) / 2 + 0.5;
        let X = vt[vstart + 0] / 2 * this.l + this.x;
        let Y = vt[vstart + 1] / 2 * this.h + this.y;
        let Z = vt[vstart + 2] / 2 * this.w + this.z;

        // Push vertices
        this.vertices.push(
          X,
          Y,
          Z,
          u,
          v,
          shade,
          shade,
          shade,
          1
        );
      }

      // Iterate over indices
      for (let j = side * 6; j < side * 6 + 6; j++) {
        let idx = CUBE_INDICES[j] - side * 4;
        this.indices.push(TOTAL_VERTS + totalVerts + idx);
        // cubeIndices.push(TOTAL_VERTS + CUBE_INDICES[j]);
      }

      totalVerts += 4; // next face is 4 vertices away
    }
  }

  removeFaces() {
    let block;
    let skipSides = [false, false, false, false, false, false];

    // TOP
    block = getBlock(this.x, this.y + 1, this.z);
    if (this.compareFaces(block)) skipSides[0] = true;
    // LEFT
    block = getBlock(this.x - 1, this.y, this.z);
    if (this.compareFaces(block)) skipSides[1] = true;
    // RIGHT
    block = getBlock(this.x + 1, this.y, this.z);
    if (this.compareFaces(block)) skipSides[2] = true;
    // FRONT
    block = getBlock(this.x, this.y, this.z + 1);
    if (this.compareFaces(block)) skipSides[3] = true;
    // BACK
    block = getBlock(this.x, this.y, this.z - 1);
    if (this.compareFaces(block)) skipSides[4] = true;
    // BOTTOM
    block = getBlock(this.x, this.y - 1, this.z);
    if (this.compareFaces(block)) skipSides[5] = true;

    return skipSides;
  }

  compareFaces(block) {
    if (!block) return false;
    if (this.transparent && block.transparent) return true;
    if (!this.transparent && !block.transparent) return true;
    return false;
  }

}


function createCube(x, y, z, type = "smooth_stone") {
  let cube = new Cube(x, y, z, 1, 1, 1, type);
  cubes[x + "," + y + "," + z] = cube;
}


// Rendering all chunks
    // for (let x in Chunks) {
    //     for (let z in Chunks[x]) {
    //         let chunk = Chunks[x][z];
    //         if (chunk.complete) {
    //             Chunks[x][z].render();
    //         }
    //     }
    // }


function calculateFog(gl, buffer) {
    // x, y, z, tx, ty, r, g, b, a, fog
    let D = 50;
    for (let i=0; i<buffer.vertices.length; i+=10) {
        let x = buffer.vertices[i+0];
        let y = buffer.vertices[i+1];
        let z = buffer.vertices[i+2];
        let d = dist(x, y, z, player.x, player.y, player.z) / D;
        buffer.vertices[i+9] = Math.min(1-(d*d), 1);
    }

    buffer.setAttributes(gl);
}

